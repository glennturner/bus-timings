var BusTimeService;(()=>{"use strict";var t={d:(e,s)=>{for(var r in s)t.o(s,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:s[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};(()=>{function s(t,e,s,r){function i(t){return t*(Math.PI/180)}const o=i(s-t),n=i(r-e),a=Math.sin(o/2)*Math.sin(o/2)+Math.cos(i(t))*Math.cos(i(s))*Math.sin(n/2)*Math.sin(n/2);return 2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a))*6371}t.r(e),t.d(e,{BusTimeService:()=>a,Store:()=>i});class r{#t;#e=[];#s=[];constructor(t,e,s=void 0,r=void 0){this.id=t,this.name=e,this.lat=s,this.lon=r}get direction(){return this.#t}set direction(t){this.#t=t}get routes(){return this.#s}set routes(t){this.#s=t}get predictions(){return this.#e}set predictions(t){this.#e=t}get displayName(){return`${this.name} (${this.direction})`}distanceFrom(t,e){return s(t,e,this.lat,this.lon)}}class i{#r;#i;constructor(t,e="localStorage"){this.#r=t,this.#i=e}get storeName(){return this.#r}get storageType(){return this.#i}get({raw:t=!1}={}){let e={};switch(this.storageType){case"localStorage":e=this.getLocalStore();case"fileStorage":e=this.getFileStore()}return t?e:e?.data||[]}lastUpdated(){return this.get().updatedAt}getFileStore(){return[]}getLocalStore(){return JSON.parse(localStorage.getItem(this.storeName))||[]}save(t){const e={data:t,updatedAt:Date.now()};switch(this.storageType){case"localStorage":return this.saveLocalStore(e);case"fileStorage":return this.saveFileStore(e);default:return[]}}delete(){switch(this.storageType){case"localStorage":return this.deleteLocalStore();case"fileStorage":return this.deleteFileStore();default:return[]}}deleteLocalStore(){localStorage.removeItem(this.storeName)}deleteFileStore(){}sweep(t){this.get({raw:!0})?.updatedAt<t&&this.delete()}saveLocalStore(t){localStorage.setItem(this.storeName,JSON.stringify(t))}saveFileStore(t){return[]}}class o{#o=[];#n=[];#a;#r="BusTimingsBusTrackerRoutes";constructor(t,e){this.id=t,this.name=e,this.displayName=`${this.id} - ${this.name}`,this.#a=new i(this.#r)}get directions(){return this.#o}set directions(t){this.#o=t}get stops(){return this.#n}set stops(t){this.#n=t.map((t=>new r(t.id,t.name,t.lat,t.lon)))}nearbyStops(t,e){console.log("STOPS",this.stops)}}class n{#p=void 0;#t=void 0;#h=void 0;#e=[];#a;#i=void 0;static storageName="BusTimingsTrips";constructor({origin:t,destination:e,storageType:s="localStorage"}={}){this.#i=s,this.origin=t||{},this.destination=e,this.#a=new i(n.storageName,this.#i)}store(){n.trips=[{route:{id:this.route.id,name:this.route.name},direction:this.direction,stop:{id:this.stop.id,name:this.stop.name},updatedAt:Date.now()},...n.storedTrips.filter((t=>t.stop.id!=this.stop.id))]}#c(){const t=UserTrip.trips.find((t=>t.stop===this.stop.id));this.route=new Route(t.route.id,t.route.name),this.direction=t.direction,this.stop=new r(t.stop.id),this.stop.direction=this.direction}static get recentStopExpiryDays(){return 14}static get storedTrips(){return new i(n.storageName).get()}static get trips(){return n.storedTrips.map((t=>{let e=new n;return e.route=new o(t.route.id,t.route.name),e.direction=t.direction,e.stop=new r(t.stop.id,t.stop.name),e.stop.direction=e.direction,e}))}static set trips(t){new i(n.storageName).save(t)}static get tripStops(){return n.trips.map((t=>t.stop))}static#u(){const t=new Date;t.setDate(t.getDate()-n.recentStopExpiryDays),n.trips=n.trips.filter((e=>new Date(e.updatedAt)>t))}get shortDisplayName(){return`${this.route.displayName} - ${this.stop.name}`}get displayName(){return`${this.route.displayName} - ${this.stop.name} (${this.direction})`}get route(){return this.#p}set route(t){this.#p=t}get direction(){return this.#t}set direction(t){this.#t=t}get stop(){return this.#h}set stop(t){this.#h=t}}class a{#d;#l;#g;#r;#m;#s=[];#n=[];#y=.5;#S="json";#w="en";constructor(t,e="https://bustime.mta.info/api/siri/",s="localStorage",r="BusTimeBusTrackerPrefs"){this.#d=t,this.#l=e,this.#r=r,console.log("storeName",this.#r),this.#m=s,console.log("storeType",this.#m),this.locationCache=new i("location",this.#m),this.trip=new n({storageType:this.#m}),this.#g=new i(this.#r,this.#m)}routeById(t){return this.routes.find((e=>e.id===t))}stopById(t){return this.stops.find((e=>e.id===t))}userStopDisplayName(t){return n.tripStops.find((e=>e.stopId==t.id))}sortRecentStops(t="updatedAt"){return n.tripStops.sort((e=>e[t]))}setCurrentUserLocation(t){this.trip.origin=t,this.locationCache.save(t)}async getTripOrigin(){return await new Promise((t=>t(this.trip.origin)))}async getTime(){return await this.request("gettime").then((t=>t.tm))}async getPredictionsByRouteIds(t,e=!1){return t=t.slice(0,2),await this.getNearbyStopsByRouteIds(t).then((t=>{this.getPredictions(t.map((t=>t.id))).then((t=>{console.log("predictionsByRouteIds"),console.log(t)}))}))}async getNearestStopsByRouteIds(t){let e=new Map;return await this.getNearbyStopsByRouteIds(t).then((t=>{const[s,r]=[this.trip.origin.latitude,this.trip.origin.longitude];return t.map((t=>{let s=`${t.routeNumber}-${t.direction}`;e.get(s)||e.set(s,[]),e.get(s).push(t)})),e.forEach(((t,i)=>{e.set(i,t.sort(((t,e)=>t.distanceFrom(s,r)-e.distanceFrom(s,r))).shift())})),Object.values(Object.fromEntries(e))}))}async getNearbyStopsByRouteIds(t){return t=t.slice(0,2),await this.getRoutesDirectionsByRouteIds(t).then((t=>Promise.all(t.flat().map((t=>this.getNearbyStops(t.routeId,t.direction)))))).then((t=>t.flat()))}async getRoutesDirectionsByRouteIds(t){const e=t.map((t=>this.getDirections(t).then((e=>e.map((e=>({direction:e,routeId:t})))))));return await Promise.all(e)}async getRoutes(){return await this.request("getroutes").then((t=>t.routes.map((t=>{const e=new o(t.rt,t.rtnm);return this.routes.push(e),e}))))}async getStops(t){return await this.request("getstops",{stpid:t.join(",")}).then(this.#f)}async getStopsByRouteAndDirection(t,e){return await this.request("getstops",{dir:e,rt:t}).then((s=>this.#f(s).map((s=>(s.routeNumber=t,s.direction=e,s)))))}async getRecentStops(){return await this.request("getstops",{stpid:n.tripStops.map((t=>t.id)).join(",")}).then(this.#f)}async getNearbyStops(t,e){return await this.getStopsByRouteAndDirection(t,e).then((t=>t.filter((t=>this.getDistanceFromUser(t)<this.#y))))}async getVehicles(t){return await this.request("getvehicles",{rt:t.join(",")}).then((t=>t.vehicle))}async getDirections(t){return await this.request("getdirections",{rt:t}).then((t=>t.directions.map((t=>t.dir))))}async getStopsPredictions(t){return await this.request("getpredictions",{stpid:t.map((t=>t.id)).join(",")}).then((e=>e.prd?(e.prd.map((e=>{t.find((t=>t.id===e.stpid)).predictions.push(e)})),t):[]))}async getPredictions(t){return await this.request("getpredictions",{stpid:t.join(",")}).then((t=>t.prd))}getDistanceFromUser(t){return s(this.trip.origin.latitude,this.trip.origin.longitude,t.lat,t.lon)}#f(t){return t.stops.map((t=>new r(t.stpid,t.stpnm,t.lat,t.lon)))}get prefs(){return this.#g.get()}set prefs(t){this.#g.save(t)}pref(t){return this.prefs[t]}get recentUserStopIds(){return n.tripStops.map((t=>t.id))}get trips(){return n.trips}get tripStops(){return n.tripStops||[]}get routes(){return this.#s}set routes(t){this.#s=t}set route(t){this.trip.route=this.routeById(t)}get stops(){return this.#n}set stops(t){this.#n=t}set stop(t){this.trip.stop=this.stopById(t),this.trip.store()}async request(t,e={}){return this.#T(t,e)}async#T(t,e={}){e.key=this.#d,e.format=this.#S,e.locale=this.#w;const s=`${this.#l}/${t}?`+Object.keys(e).map((t=>t+"="+e[t])).join("&");return console.log(s),await fetch(s,{method:"GET",headers:{"Content-Type":"application/json"}}).then((t=>t.json())).then((t=>t["bustime-response"])).catch((t=>console.error(t)))}}})(),BusTimeService=e})();